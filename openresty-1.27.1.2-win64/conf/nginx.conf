#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log info; #写入文件
error_log  stderr info;         #输出到控制台
#access_log 也输出到控制台

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    #加载 MIME 类型映射文件，用于根据文件扩展名设置 Content-Type。
    default_type  application/octet-stream;
    #设置默认的 MIME 类型为 application/octet-stream，表示未知的文件类型。
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;#文件传输优化，直接从磁盘读取文件并发送到网络，减少 CPU 和内存的使用。
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;#客户端与服务器之间的长连接超时时间
    #启用 Gzip 压缩以减少传输数据量，提高页面加载速度
    gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
       listen       443 ssl;
       server_name  localhost;

       ssl_certificate      cert.pem;
       ssl_certificate_key  key.pem;

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       location /api/v1/ {
    # 1. Handle preflight OPTIONS requests first
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5174' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Content-Length' '0';
        return 204;
    }

    # 2. Proxy the actual request (if not OPTIONS)
    proxy_pass https://localhost:8000/api/v1/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # 3. Add CORS headers to the response from the proxied request
    #允许的来源
    add_header 'Access-Control-Allow-Origin' 'http://localhost:5174' always;
    # Access-Control-Allow-Methods and Access-Control-Allow-Headers are primarily for the preflight.
    # For the actual request, Origin and Credentials are the most important.
    # We can include the others for consistency if desired.
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
}

       location / {
           root   html;
           index  index.html index.htm;
       }
       location /test {
        #只允许GET请求
        if ($request_method !~* GET) {
            return 405;
        }
        #只允许内部IP访问
        if ($remote_addr !~* 127.0.0.1) {
            return 403;
        }
        #做一个求和
        content_by_lua_block {
            local a = 1
            local b = 2
            local c = a + b
            ngx.say("a + b = " .. c)
        }
       }
    }

}
