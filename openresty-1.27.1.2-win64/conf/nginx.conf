#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log info; #写入文件
error_log  stderr info;         #输出到控制台
#access_log 也输出到控制台

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # 设置共享内存区域，用于存储流量统计信息
    lua_shared_dict prometheus_metrics 10M;
    # 设置共享内存区域，用于存储流量统计信息
    lua_shared_dict traffic_status 10m;
    lua_shared_dict traffic_details 1m; # 新增：用于存储每秒流量详情
    # 设置 Lua 模块路径
    lua_package_path "D:/AWINXIN/back_web/my-full-stack/backend/openresty-1.27.1.2-win64/lualib/?.lua;;";
     # 初始化 Prometheus 指标
    init_worker_by_lua_block {
        -- 初始化 Prometheus 客户端库
        -- "prometheus_metrics" 是之前在 http 指令块中 lua_shared_dict 定义的共享内存区域的名称，用于存储指标数据
        ngx_prometheus_metrics = require("prometheus").init("prometheus_metrics")

        -- 定义 "nginx_http_requests_total" 计数器 (Counter)
        -- 用于统计 HTTP 请求总数
        -- 标签 (labels): "host" (请求的主机名), "status" (HTTP 响应状态码)
        ngx_prometheus_metrics.requests = ngx_prometheus_metrics:counter(
            "nginx_http_requests_total", "HTTP 请求总数", {"host", "status"}
        )

        -- 定义 "nginx_http_request_duration_seconds" 直方图 (Histogram)
        -- 用于统计 HTTP 请求的处理延迟分布
        -- 标签 (labels): "host" (请求的主机名)
        ngx_prometheus_metrics.latency = ngx_prometheus_metrics:histogram(
            "nginx_http_request_duration_seconds", "HTTP 请求延迟 (秒)", {"host"}
        )

        -- 定义 "nginx_http_connections" 仪表盘 (Gauge)
        -- 用于统计当前活动的 HTTP 连接状态 (reading: 读请求头, waiting: 等待处理, writing: 写响应)
        -- 标签 (labels): "state" (连接状态)
        ngx_prometheus_metrics.connections = ngx_prometheus_metrics:gauge(
            "nginx_http_connections", "HTTP 连接数", {"state"}
        )

        -- 定义 "nginx_http_request_bytes_total" 计数器 (Counter)
        -- 用于统计从客户端接收到的总请求字节数
        -- 标签 (labels): "host" (请求的主机名)
        ngx_prometheus_metrics.request_bytes = ngx_prometheus_metrics:counter(
            "nginx_http_request_bytes_total", "客户端总请求字节数", {"host"}
        )

        -- 定义 "nginx_http_response_bytes_total" 计数器 (Counter)
        -- 用于统计发送给客户端的总响应字节数
        -- 标签 (labels): "host" (请求的主机名)
        ngx_prometheus_metrics.response_bytes = ngx_prometheus_metrics:counter(
            "nginx_http_response_bytes_total", "服务端总响应字节数", {"host"}
        )
    }
    include       mime.types;
    #加载 MIME 类型映射文件，用于根据文件扩展名设置 Content-Type。
    default_type  application/octet-stream;
    #设置默认的 MIME 类型为 application/octet-stream，表示未知的文件类型。
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;#文件传输优化，直接从磁盘读取文件并发送到网络，减少 CPU 和内存的使用。
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;#客户端与服务器之间的长连接超时时间
    #启用 Gzip 压缩以减少传输数据量，提高页面加载速度
    gzip  on;

    # Adjust the path '/path/to/your/lualib' if opm installs to a custom place
    # The ';;' ensures that default paths are also searched.
    # lua_package_path "/path/to/your/lualib/?.lua;/path/to/your/lualib/?/init.lua;;";

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
       listen       443 ssl;
       server_name  localhost;

       ssl_certificate      cert.pem;
       ssl_certificate_key  key.pem;

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       log_by_lua_block { 
           -- 使用 pcall 进行错误捕获，避免因 Lua 脚本错误导致整个请求失败或 Nginx worker 进程崩溃
           local ok, err = pcall(function()
               local host = ngx.var.host or ngx.var.server_name or "unknown"
               local req_len = tonumber(ngx.var.request_length) or 0
               local res_len = tonumber(ngx.var.bytes_sent) or 0

               -- 1. 更新标准的 Prometheus 总量计数器 (保持不变)
               if ngx_prometheus_metrics and ngx_prometheus_metrics.request_bytes and ngx_prometheus_metrics.response_bytes then
                   ngx_prometheus_metrics.request_bytes:inc(req_len, {host})
                   ngx_prometheus_metrics.response_bytes:inc(res_len, {host})
               else
                   ngx.log(ngx.WARN, "Prometheus 字节数统计指标在 log_by_lua_block 中未完全初始化.")
               end

               -- 2. 更新每秒流量详情到新的共享内存 traffic_details
               local traffic_details_shdict = ngx.shared.traffic_details
               if traffic_details_shdict then
                   local current_ts_sec = ngx.time() -- 获取当前时间的UNIX时间戳 (秒)
                   traffic_details_shdict:incr("req_bytes_" .. current_ts_sec, req_len, 0) -- 累加当前秒的请求字节数
                   traffic_details_shdict:incr("res_bytes_" .. current_ts_sec, res_len, 0) -- 累加当前秒的响应字节数
               else
                   ngx.log(ngx.WARN, "共享内存 'traffic_details' 在 log_by_lua_block 中未找到.")
               end
           end)
           if not ok then
               ngx.log(ngx.ERR, "log_by_lua_block 执行出错: ", err) -- 简化了错误日志前缀
           end
       }

       location /api/v1/ {
        # 1. Handle preflight OPTIONS requests first
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'http://localhost:5174' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Length' '0';
            return 204;
        }

        # 2. Proxy the actual request (if not OPTIONS)
        proxy_pass http://localhost:8000/api/v1/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 3. Add CORS headers to the response from the proxied request
        add_header 'Access-Control-Allow-Origin' 'http://localhost:5174' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
       }

       location / {
           root   html;
           index  index.html index.htm;
       }

        location /status {
            # 只允许 GET 请求
            if ($request_method !~* GET) {
                return 405;
            }

            # 只允许内部 IP 访问
            if ($remote_addr !~* "127\\.0\\.0\\.1") {
                return 403;
            }

            content_by_lua_block { 
                ngx.log(ngx.WARN, "正在访问 /status 端点") -- 调试日志，标记此端点被访问
                -- 使用 pcall 进行错误捕获
                local ok, err = pcall(function()
                    -- 增加总请求数计数器的值。1 是本次增加的量。标签值为当前请求的主机名和状态码
                    ngx_prometheus_metrics.requests:inc(1, {ngx.var.server_name, ngx.var.status})
                    -- 记录当前请求的延迟。tonumber(ngx.var.request_time) 是延迟时间（秒）。标签值为当前请求的主机名
                    ngx_prometheus_metrics.latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
                    -- 向客户端发送响应体
                    ngx.say("Hello, Prometheus!")
                end)
                -- 如果 pcall 执行失败
                if not ok then
                    -- 记录错误信息
                    ngx.log(ngx.ERR, "/status 端点执行出错: ", err)
                    -- 确保返回 500 错误码，如果当前状态码不是错误码的话
                    if ngx.status < 500 then
                         ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    end
                    -- 向客户端发送错误提示
                    ngx.say("处理 /status 请求时发生内部服务器错误")
                    -- 退出请求处理，并设置 HTTP 状态码
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            }
        }

        location /metrics {
            content_by_lua_block {
                -- 使用 pcall 进行错误捕获
                local ok, err = pcall(function()
                    -- 更新连接状态的仪表盘 (Gauge) 指标
                    if ngx_prometheus_metrics and ngx_prometheus_metrics.connections then
                        local cr = tonumber(ngx.var.connections_reading) or 0
                        local cw = tonumber(ngx.var.connections_waiting) or 0
                        local cwr = tonumber(ngx.var.connections_writing) or 0
                        ngx_prometheus_metrics.connections:set(cr, {"reading"})
                        ngx_prometheus_metrics.connections:set(cw, {"waiting"})
                        ngx_prometheus_metrics.connections:set(cwr, {"writing"})
                    else
                        ngx.log(ngx.WARN, "Prometheus 连接数指标在 /metrics 中未完全初始化.")
                    end

                    -- 调用 Prometheus 客户端库的 collect 方法
                    -- 该方法会收集所有已定义的指标，并将它们格式化为 Prometheus 的文本输出格式
                    ngx.header.content_type = 'text/plain; charset=utf-8' -- 明确设置 Prometheus 文本格式
                    ngx_prometheus_metrics:collect()
                end)

                if not ok then
                    ngx.log(ngx.ERR, "/metrics content_by_lua_block 执行出错: ", err)
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.header.content_type = 'text/plain; charset=utf-8'
                    ngx.say("Error collecting metrics: " .. tostring(err))
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            }
        }

        location /metrics-json {
            content_by_lua_block { 
                local ok, err_msg = pcall(function()
                    local cjson = require "cjson"
                    local json_output = {}
                    local traffic_details_shdict = ngx.shared.traffic_details

                    if traffic_details_shdict then
                        local current_second_epoch = ngx.time()
                        local previous_second_epoch = current_second_epoch - 1

                        local req_bytes_last_sec = tonumber(traffic_details_shdict:get("req_bytes_" .. previous_second_epoch))
                        local res_bytes_last_sec = tonumber(traffic_details_shdict:get("res_bytes_" .. previous_second_epoch))

                        json_output.nginx_http_request_bytes_last_second = req_bytes_last_sec or 0
                        json_output.nginx_http_response_bytes_last_second = res_bytes_last_sec or 0
                        
                        -- 可选：如果希望这些键在被读取后"清空"（设置为0），可以这样做，但这取决于具体需求
                        -- traffic_details_shdict:set("req_bytes_" .. previous_second_epoch, 0)
                        -- traffic_details_shdict:set("res_bytes_" .. previous_second_epoch, 0)
                    else
                        ngx.log(ngx.ERR, "/metrics-json: 共享内存 'traffic_details' 未找到.")
                        json_output.error = "traffic_details shared dictionary not found"
                    end
                    
                    ngx.header.content_type = "application/json; charset=utf-8"
                    ngx.say(cjson.encode(json_output))
                    ngx.exit(ngx.HTTP_OK)
                end)

                if not ok then
                    ngx.log(ngx.ERR, "/metrics-json: pcall failed: ", err_msg)
                    local status_to_exit = ngx.HTTP_INTERNAL_SERVER_ERROR
                    if ngx.status >= ngx.HTTP_BAD_REQUEST then -- 如果状态码已经是客户端或服务器错误，则使用它
                        status_to_exit = ngx.status
                    else
                        ngx.status = status_to_exit
                    end
                    if not ngx.header_sent then 
                        ngx.header.content_type = "application/json; charset=utf-8"
                        local cjson_err_encode = require "cjson"
                        if cjson_err_encode then
                             ngx.say(cjson_err_encode.encode({error = true, message = "Error in /metrics-json endpoint: " .. tostring(err_msg)}))
                        else
                             ngx.say("{\"error\":true,\"message\":\"Critical error in /metrics-json and cjson not available\"}")
                        end
                    end
                    ngx.exit(status_to_exit)
                end
            }
        }
    }

}
